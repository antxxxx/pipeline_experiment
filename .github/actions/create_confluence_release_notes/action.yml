name: 'Create confluence release notes'
description: 'Do things with confluence release notes'
inputs:
  TARGET_ENVIRONMENT:
    required: true
    description: "Target Environment"
  RELEASE_TAG:
    required: false
    description: "Target tag"
  MARK_JIRA_RELEASED:
    required: true
    description: "whether to mark tag released in jira"
  CONFLUENCE_PAGE_ID:
    required: true
    description: "The id of confluence page to update or create under"
  CREATE_RC_RELEASE_NOTES:
    required: true
    description: "whether to create rc release notes page"
    default: "false"
  RELEASE_VERSION:
    required: false
    description: "what release version to use for RC release notes and marking released in jira" 
  DEV_CLOUD_FORMATION_DEPLOY_ROLE:
    required: true
    description: "The dev cloud formation deploy role"
  TARGET_CLOUD_FORMATION_DEPLOY_ROLE:
    required: true
    description: "The target cloud formation deploy role"

runs:
  using: "composite"
  steps:
# comment out for testing
#    - name: connect to target account
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-region: eu-west-2
#        role-to-assume: ${{ secrets.TARGET_CLOUD_FORMATION_DEPLOY_ROLE }}
#        role-session-name: github-actions
    - name: Get deployed tag on target
      shell: bash
      run: |
        # get current deployed tag on target
        # comment out for testing
        # export current_deployed_tag=$(aws cloudformation describe-stacks --stack-name ${{ inputs.TARGET_ENVIRONMENT }}-ci --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
        export current_deployed_tag="current_deployed_tag"
        echo "current_deployed_tag=${current_deployed_tag}" >> "$GITHUB_ENV"
# comment out for testing
#    - name: connect to dev account
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-region: eu-west-2
#        role-to-assume: ${{ secrets.DEV_CLOUD_FORMATION_DEPLOY_ROLE }}
#        role-session-name: github-actions
    - name: get current dev tag
      shell: bash
      run: |
        # get current dev tag
        # comment out for testing
        # dev_tag=$(aws cloudformation describe-stacks --stack-name dev-ci --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
        dev_tag="dev_tag"
        export dev_tag
        echo "dev_tag=${dev_tag}" >> "$GITHUB_ENV"
    - name: Call to markJiraReleased lambda
      shell: bash
      if: inputs.MARK_JIRA_RELEASED == 'true'
      run: |
        # call mark jira released
        release_version="PfP-AWS-${{ inputs.RELEASE_VERSION }}"
        echo "calling mark jira released"
        cat <<EOF > payload.json
        { 
            "releaseVersion": "$release_version"
        }
        EOF
        cat payload.json
        # comment out for testing
        # aws lambda invoke --function-name MarkJiraReleased \
        # --cli-binary-format raw-in-base64-out \
        # --payload file://payload.json out.txt
    - name: create int release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'false'
      run: |
        # create int release notes
        ENV_VAR=release-notes:CreateReleaseNotesLambdaName
        # comment out for testing
        # RELEASE_NOTES_LAMBDA=$(aws cloudformation list-exports \
        #  --query "Exports[?Name=='$ENV_VAR'].Value" \
        #  --output text)
        RELEASE_NOTES_LAMBDA="RELEASE_NOTES_LAMBDA"
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "prescriptionsforpatients", 
            "targetEnvironment": "INT", 
            "productName": "Prescritpions for Patients AWS layer", 
            "releaseNotesPageId": "693750027", 
            "releaseNotesPageTitle": "Current PfP AWS layer release notes - INT"
        }
        EOF
        cat payload.json
        # comment out for testing
        # aws lambda invoke --function-name "${RELEASE_NOTES_LAMBDA}" \
        # --cli-binary-format raw-in-base64-out \
        # --payload file://payload.json out.txt
    - name: create int rc release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'true'
      run: |
        # create int rc release notes
        ENV_VAR=release-notes:CreateReleaseNotesLambdaName
        # comment out for testing
        # RELEASE_NOTES_LAMBDA=$(aws cloudformation list-exports \
        #  --query "Exports[?Name=='$ENV_VAR'].Value" \
        #  --output text)
        RELEASE_NOTES_LAMDA="RELEASE_NOTES_LAMBDA"
        release_tag="${{ inputs.RELEASE_TAG }}"
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$release_tag", 
            "repoName": "prescriptionsforpatients", 
            "targetEnvironment": "INT", 
            "productName": "Prescritpions for Patients AWS layer", 
            "releaseNotesPageId": "710051481", 
            "releaseNotesPageTitle": "PfP-AWS-$dev_tag - Deployed to [INT] on $(date +'%d-%m-%y')",
            "createReleaseCandidate": "true",
            "releasePrefix": "PfP-AWS-"
        }
        EOF
        cat payload.json
        # comment out for testing
        # aws lambda invoke --function-name "${RELEASE_NOTES_LAMBDA}" \
        # --cli-binary-format raw-in-base64-out \
        # --payload file://payload.json out.txt
    - name: create prod release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'prod'
      run: |
        # create prod release notes
        ENV_VAR=release-notes:CreateReleaseNotesLambdaName
        # comment out for testing
        # RELEASE_NOTES_LAMBDA=$(aws cloudformation list-exports \
        #  --query "Exports[?Name=='$ENV_VAR'].Value" \
        #  --output text)
        RELEASE_NOTES_LAMBDA="RELEASE_NOTES_LAMBDA"
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "prescriptionsforpatients", 
            "targetEnvironment": "PROD", 
            "productName": "Prescritpions for Patients AWS layer", 
            "releaseNotesPageId": "693750029", 
            "releaseNotesPageTitle": "Current PfP AWS layer release notes - PROD"
        }
        EOF
        cat payload.json
        # comment out for testing
        # aws lambda invoke --function-name "${RELEASE_NOTES_LAMBDA}" \
        #  --cli-binary-format raw-in-base64-out \
        #  --payload file://payload.json out.txt
